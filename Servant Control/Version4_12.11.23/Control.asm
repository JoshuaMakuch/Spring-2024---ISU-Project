;******************************************************************************
;                                                                             *
;    Filename:	    Control.asm						      *
;    Date:	    DECEMBER 10 2023                                          *
;    File Version:  1                                                         *
;    Author:        Jessica McArthur                                          *
;    Company:       Idaho State University                                    *
;    Description:   Firmware for Peripheral Controller of Universal Remote    *
;		                                                              *
;******************************************************************************
;******************************************************************************
;                                                                             *
;    Revision History:                                                        *
;	1: Setup for Peripheral Controller. Communicates with the master      *
;	   controller using I2C communication.				      *
;	   Controls: 1 dip switch, 2 encoders and 6 push button switches      *
;	    STARTED November 10 2023 -                                        *
;									      *
;                                                                             *
;******************************************************************************
	LIST	    p=16LF1788
	INCLUDE	    p16lf1788.INC
	INCLUDE	    1788_SETUP.INC
	
; CONFIG1
; __config 0xEFE4
 __CONFIG _CONFIG1, _FOSC_INTOSC & _WDTE_OFF & _PWRTE_OFF & _MCLRE_ON & _CP_OFF & _CPD_OFF & _BOREN_OFF & _CLKOUTEN_OFF & _IESO_OFF & _FCMEN_OFF
; CONFIG2
; __config 0xFFFF
 __CONFIG _CONFIG2, _WRT_OFF  & _PLLEN_OFF & _STVREN_ON & _BORV_LO & _LPBOR_OFF & _LVP_OFF

    ;suppress "not in bank 0" message,  Found label after column 1,
    errorlevel -302,-207,-305,-206,-203			
							
;******************************************		
;INTERUPT VECTORS
;******************************************
		ORG 	H'000'					
 		GOTO 	SETUP		;RESET CONDITION GOTO SETUP
		ORG	H'004'
		GOTO	INTERUPT		
;****************************************
;SETUP
;***************************************	
	SETUP
		CALL	INITIALIZE	;SETUP CALL FROM 1788_SETUP.INC FILE
			
		GOTO	MAIN			
;******************************************
;INTERUPT SERVICE ROUTINE 
;******************************************
INTERUPT
    SAVE_RESISTERS					;SAVE CONTENT OF WORKING AND STATUS REGISTER
	BANKSEL W_SAVE
	MOVWF W_SAVE					;SAVES CONTENTS OF WORKING REGISTER
	MOVFW STATUS	
	MOVWF STATUS_SAVE				;SAVES CONTENTS OF STATUS REGISTER
   ;**********I2C INTERRUPT FLAG TESTED **************
	BANKSEL PIR1
	BTFSS PIR1, SSP1IF				;TEST I2C INTERRUPT FLAG
	GOTO  IOFC
	
	CALL XMIT					;CALL SUB TO TRANSMIT DATA USING I2C
	BANKSEL PIR1
	BCF PIR1, SSP1IF				;CLEAR I2C INTERRUPT FLAG
	GOTO RESTORE_REGISTERS
    ;**********CLEARS INTERUPT ON CHANGE FLAG*******************
    IOFC
	BANKSEL INTCON	
	BCF	INTCON, IOCIF				;CLEAR INTERRUPT ON CHANGE FLAG
	BCF	INTCON, TMR0IF				;DISABLE TMR0 INTERRUPT
	
	CALL ENCODER					;CALL SUB TO TEST INTERRUPT ON CHANGE INPUTS
	GOTO RESTORE_REGISTERS				;LEAVE ISR
RESTORE_REGISTERS		 
    	;********RESTORE WORKING AND STATUS REGISTER   
	BANKSEL STATUS_SAVE				;RESTORE STATUS REGISTER CONTENTS
	MOVFW STATUS_SAVE
	MOVWF STATUS					;RESTORE STATUS REGISTER
	MOVFW W_SAVE					;RESTORE WORKING REGISER
	
	RETFIE						;RETURN AND ENABLE INTERUPTS 
		
;******************************************
;  SUBROUTINES
;******************************************
XMIT;*****************************************		;SUB - TRANSMIT DATA USING I2C
	BANKSEL SSP1STAT				;CHECK IS ADDRESS HAS BEEN RECEIVED
	BTFSC SSP1STAT, D_NOT_A 
	RETURN						;LEAVE ISR IF ADDRESS NOT RECEIVED
	
	BANKSEL COMMAND_1STBYTE
	MOVF COMMAND_1STBYTE, W				;LOAD COMMAND DATA TO DATA REGISTER
	BANKSEL  TRANSMIT_BYTE
	MOVWF TRANSMIT_BYTE
	
	CALL TXDATA					;CALLS SUB TO TRANSMIT DATA
	
	
	BANKSEL COMMAND_1STBYTE
	CLRF  COMMAND_1STBYTE				;CLEARS COMMAND BYTE
	
	BANKSEL COMMAND_ENCODER
	CLRF COMMAND_ENCODER				;CLEAR ENCODER COMMAND ENABLE
		
	BANKSEL PIR1
	BCF PIR1, SSP1IF				;CLEAR I2C INTERRUPT FLAG
	
	RETURN						;RETURN AND LEAVE ISR
	
    TXDATA;*************************************	;SUB - TRANSMIT 1 BYTE OF DATA
    
	;**********START CLOCK STRETCH**********	
	BANKSEL SSP1CON1				;START CLOCK STRECH
	BCF SSP1CON1, CKP				;DISABLE CLOCK AND TRANSMIT	
	
	MOVWF	TRANSMIT_BYTE
	MOVF TRANSMIT_BYTE, W
	BANKSEL SSP1BUF					;LOAD MSSP BUFFER WITH DATA BYTE
	MOVWF SSP1BUF
	;**********END CLOCK STRETCH**********
	BANKSEL SSP1CON1				;END CLOCK STRECH
	BSF SSP1CON1, CKP				;ENABLE CLOCK AND TRANSMIT
	
	BANKSEL SSP1STAT				;WAIT FOR TRANSMIT TO BE COMPLETED
	BTFSC SSP1STAT, BF
	GOTO $-2
	
	RETURN						;RETURN TO I2C SUB (XMIT)
	
ENCODER;*********************************************	;SUB - TEST INPUTS WITH INTERRUPT ON CHANGE ENABLED
 ;*************TEST AND CLEAR IOC FLAGS FOR ENCODER A****************
    ENCODER_A_IOC
	BANKSEL IOCBF
	BTFSS IOCBF, IOCBF0				;TEST B0 INTERRUPT ON CHANGE FLAG
	GOTO  ENCODER_A_INPUTB				;GOTO TEST OF INPUT B FLAG
	BCF   IOCBF, IOCBF0				;CLEAR B0 INTERRUPT ON CHANGE FLAG
   
    ENCODER_A_TEST_A_HIGH				
	BANKSEL PORTB						
	BTFSS PORTB, 0					;TEST IF INPUT A (B0) IS HIGH
	GOTO ENCODER_A_TEST_A_LOW			;GOTO TO TEST IF INPUT A IS LOW						 
	BANKSEL ENCODER_A				
	BSF	 ENCODER_A, 0				;SET ENABLE FOR INPUT A HIGH
	RETURN						;RETURN AND LEAVE ISR
    ENCODER_A_TEST_A_LOW				
	BANKSEL PORTB						
	BTFSC PORTB, 0					;TEST IF INPUT A (B0) IS LOW
	RETURN						;RETURN AND LEAVE ISR			
	BANKSEL ENCODER_A
	BSF	 ENCODER_A, 1				;SET ENABLE FOR INPUT A LOW
	RETURN						;RETURN AND LEAVE ISR	 
    
    ENCODER_A_INPUTB
	BANKSEL IOCBF
	BTFSS IOCBF, IOCBF1				;TEST B1 INTERRUPT ON CHANGE FLAG	
	GOTO  ENCODER_B_IOC				;GOTO TEST OF ENCODER B FLAG
	BCF	IOCBF, IOCBF1				;CLEAR B1 INTERRUPT ON CHANGE FLAG
    
    ENCODER_A_TEST_B_HIGH				
	BANKSEL PORTB						
	BTFSS PORTB, 1					;TEST IF INPUT B (B1) IS HIGH
	GOTO ENCODER_A_TEST_B_LOW			;GOTO TO TEST IF INPUT B IS LOW							 
	BANKSEL ENCODER_A				
	BSF	ENCODER_A, 2				;SET ENABLE FOR INPUT B HIGH
	RETURN						;RETURN AND LEAVE ISR					
    ENCODER_A_TEST_B_LOW				
	 BANKSEL PORTB						
	 BTFSC PORTB, 1					;TEST IF INPUT B (B1) IS LOW
	 RETURN						;RETURN AND LEAVE ISR			
	 BANKSEL ENCODER_A
	 BSF	 ENCODER_A, 3				;SET ENABLE FOR INPUT B LOW
	 RETURN						;RETURN AND LEAVE ISR
	
    ;***************TEST AND CLEAR IOC FLAGS FOR ENCODER B***********
    ENCODER_B_IOC
	BANKSEL IOCBF
	BTFSS IOCBF, IOCBF2				;TEST B2 INTERRUPT ON CHANGE FLAG
	GOTO  ENCODER_B_INPUTB				;GOTO TEST OF INPUT B FLAG
	BCF	IOCBF, IOCBF2				;CLEAR B2 INTERRUPT ON CHANGE FLAG
    
    ENCODER_B_TEST_A_HIGH				
	BANKSEL PORTB						
	BTFSS PORTB, 2					;TEST IF INPUT A (B2) IS HIGH								
	GOTO ENCODER_B_TEST_A_LOW			;GOTO TO TEST IF INPUT A IS LOW								 
	BANKSEL ENCODER_B
	BSF	 ENCODER_B, 0				;SET ENABLE FOR INPUT A HIGH
	RETURN						;RETURN AND LEAVE ISR
    ENCODER_B_TEST_A_LOW				 
	BANKSEL PORTB						
	BTFSC PORTB, 2					;TEST IF INPUT A (B2) IS LOW				
	RETURN						;RETURN AND LEAVE ISR			
	BANKSEL ENCODER_B
	BSF	 ENCODER_B, 1				;SET ENABLE FOR INPUT A LOW
	RETURN						;RETURN AND LEAVE ISR
   
    ENCODER_B_INPUTB
	BANKSEL IOCBF
	BTFSS IOCBF, IOCBF3				;TEST B3 INTERRUPT ON CHANGE FLAG
	RETURN						;RETURN AND LEAVE ISR
	BCF   IOCBF, IOCBF3				;CLEAR B3 INTERRUPT ON CHANGE FLAG
    
    ENCODER_B_TEST_B_HIGH				
	BANKSEL PORTB						
	BTFSS PORTB, 3					;TEST IF INPUT B (B3) IS HIGH
	GOTO ENCODER_B_TEST_B_LOW			;GOTO TO TEST IF INPUT B IS LOW						 
	BANKSEL ENCODER_B
	BSF	ENCODER_B, 2				;SET ENABLE FOR INPUT B HIGH
	RETURN						;RETURN AND LEAVE ISR
    ENCODER_B_TEST_B_LOW				
	BANKSEL PORTB						
	BTFSC PORTB, 3					;TEST IF INPUT A (B3) IS LOW				
	RETURN						;RETURN AND LEAVE ISR
	BANKSEL ENCODER_B			    
	BSF     ENCODER_B, 3				;SET ENABLE FOR INPUT B LOW				

	RETURN						;RETURN AND LEAVE ISR
	
DELAY ;************************************		;SUB - .5 SEC DELAY BETWEEN OUTPUTS											
	NESTED_LOOP_SETUP				;NEST LOOP CREATES MOST OF THE DELAY
	    MOVLW 0XF3					;SETS COUNT OF OUTER LOOP OF NESTED LOOP TO 243 CYCLES
	    MOVWF COUNT2
	OUTER_LOOP					;SETS COUNT OF INNER LOOP OF NESTED LOOP TO 256 CYCLES
	    MOVLW 0X00
	    MOVWF COUNT1 
	INNER_LOOP					;INNER LOOP WITH 32 Q STATES
	    NOP
	    NOP
	    NOP
	    NOP
	    NOP
	    DECFSZ COUNT1
	    GOTO INNER_LOOP
	END_INNER_LOOP  
	    DECFSZ COUNT2				;RUNS OUTER LOOP
	    GOTO OUTER_LOOP   	
	    
	    RETURN					;RETURN TO MAIN CODE
		
 ENCODER_A_SUB ;**********************************	;SUB - SET ENCODER A OUTPUTS
	;*********INPUT A CHANGES FROM LOW TO HIGH*************
		BANKSEL ENCODER_A
		BTFSS ENCODER_A, 0			;TEST IF INPUT A HIGH ENABLE IS SET (BIT0)
		GOTO ENCODER_A_INA_LOW			;GOTO TEST IF INPUT A LOW ENABLE IS SET 	
	    ;**********OLD B INPUT LOW
		BANKSEL PORTB
		BTFSC PORTB, 1				;TEST IF INPUT B (B1) IS LOW
		GOTO ENCODER_A_INB_HIGH			;GOTO TEST IF INPUT B (B1) IS HIGH
		
		BANKSEL INPUT_OLD_A
		BTFSC INPUT_OLD_A, 1			;TEST IF OLD INPUT B IS LOW (BIT1)
		GOTO LEAVE_A				;LEAVE ENCODER A SUB
	    ;*********CLOCKWISE OUTPUT
		GOTO CLOCKWISE_A			;SET ENCODER A CLOCKWISE OUTPUT 
	    ;**********OLD B INPUT HIGH
	    ENCODER_A_INB_HIGH	
		BANKSEL INPUT_OLD_A
		BTFSS INPUT_OLD_A, 1			;TEST IF OLD INPUT B IS HIGH (BIT1)
		GOTO LEAVE_A				;LEAVE ENCODER A SUB
	    ;*********COUNTER CLOCKWISE OUTPUT
		GOTO COUNTERCLOCKWISE_A			;SET ENCODER A COUNTERCLOCKWISE OUTPUT	
	     
	;*************INPUT A CHANGED FROM HIGH TO LOW***********	
	    ENCODER_A_INA_LOW
		BANKSEL ENCODER_A
		BTFSS ENCODER_A, 1			;TEST IF INPUT A LOW ENABLE IS SET (BIT1)
		GOTO ENCODER_A_INB_H			;GOTO TEST IF INPUT B HIGH ENABLE IS SET 
	   ;**********OLD B INPUT HIGH
		BANKSEL PORTB
		BTFSS PORTB, 1				;TEST IF INPUT B (B1) IS HIGH			
		GOTO ENCODER_A_INB_LOW			;GOTO TEST IF INPUT B (B1) IS LOW		
		
		BANKSEL INPUT_OLD_A
		BTFSS INPUT_OLD_A, 1			;TEST IF OLD INPUT B IS HIGH (BIT1)			
		GOTO LEAVE_A				;LEAVE ENCODER A SUB
	    ;*********CLOCKWISEOUTPUT
		GOTO CLOCKWISE_A			;SET ENCODER A CLOCKWISE OUTPUT 
	    ;**********OLD B INPUT LOW
	    ENCODER_A_INB_LOW
		BANKSEL INPUT_OLD_A
		BTFSC INPUT_OLD_A, 1			;TEST IF OLD INPUT B IS LOW (BIT1)		
		GOTO LEAVE_A				;LEAVE ENCODER A SUB
	    ;*********COUNTERCLOCKWISE OUTPUT
	     GOTO COUNTERCLOCKWISE_A			;SET ENCODER A COUNTERCLOCKWISE OUTPUT
			
	;*************INPUT B CHANGED FROM LOW TO HIGH*******		
	ENCODER_A_INB_H
		BANKSEL ENCODER_A
		BTFSS ENCODER_A, 2			;TEST IF INPUT B HIGH ENABLE IS SET (BIT2)
		GOTO ENCODER_A_INB_L			;GOTO TEST IF INPUT B LOW ENABLE IS SET 
	    ;**********OLD A INPUT HIGH
		BANKSEL PORTB
		BTFSS PORTB, 0				;TEST IF INPUT A (B0) IS HIGH
		GOTO ENCODER_A_INA_HIGH			;GOTO TEST IF INPUT A (B0) IS LOW
		
		BANKSEL INPUT_OLD_A
		BTFSS INPUT_OLD_A, 0			;TEST IF OLD INPUT A IS HIGH (BIT0)					
		GOTO LEAVE_A				;LEAVE ENCODER A SUB
	    ;*********CLOCKWISEOUTPUT
		GOTO CLOCKWISE_A			;SET ENCODER A CLOCKWISE OUTPUT 
	    ;**********OLD A INPUT LOW
	    ENCODER_A_INA_HIGH
		BANKSEL INPUT_OLD_A
		BTFSC INPUT_OLD_A, 0			;TEST IF OLD INPUT A IS LOW (BIT0)	
		GOTO LEAVE_A				;LEAVE ENCODER A SUB
	    ;*********COUNTERCLOCKWISE OUTPUT
	     GOTO COUNTERCLOCKWISE_A			;SET ENCODER A COUNTERCLOCKWISE OUTPUT
			
	;*************INPUT B CHANGED FROM HIGH TO LOW******			
	    ENCODER_A_INB_L	
		BANKSEL ENCODER_A
		BTFSS ENCODER_A, 3			;TEST IF INPUT B LOW ENABLE IS SET (BIT3)
		GOTO LEAVE_A				;LEAVE ENCODER A SUB
	    ;**********OLD A INPUT LOW
		BANKSEL PORTB
		BTFSC PORTB, 0				;TEST IF INPUT A (B0) IS LOW			
		GOTO ENCODER_A_INA_L_2			;GOTO TEST IF INPUT A (B0) IS HIGH
	
		BANKSEL INPUT_OLD_A
		BTFSC INPUT_OLD_A, 0			;TEST IF OLD INPUT A IS LOW (BIT0)		
		GOTO LEAVE_A				;LEAVE ENCODER A SUB
	    ;*********CLOCK WISE OUTPUT
		GOTO CLOCKWISE_A			;SET ENCODER A CLOCKWISE OUTPUT 	
	    ;**********OLD A INPUT HIGH
	    ENCODER_A_INA_L_2
		BANKSEL INPUT_OLD_A
		BTFSS INPUT_OLD_A, 0			;TEST IF OLD INPUT A IS HIGH (BIT0)
		GOTO LEAVE_A				;LEAVE ENCODER A SUB
	    ;*********COUNTER CLOCKWISE OUTPUT
	    GOTO COUNTERCLOCKWISE_A			;SET ENCODER A COUNTERCLOCKWISE OUTPUT
		
	;*********CLOCKWISE OUTPUT ENCODER A**************
	CLOCKWISE_A					
	        BANKSEL PORTB
		BSF PORTB, 4				;SET LED INDICATOR (B4)
		BANKSEL COMMAND_ENCODER			;SET COMMAND ENABLE
		BSF COMMAND_ENCODER, 4			;ENCODER A CLOCKWISE = BIT 4
		CALL DELAY				;CALL .5SECOND DELAY SUB
		BANKSEL PORTB				
		BCF PORTB, 4				;CLEAR LED INDICATOR (B4)
		GOTO LEAVE_A				;LEAVE ENCODER A SUB
		
	;*********COUNTER CLOCKWISE OUTPUT ENCODER A******
	COUNTERCLOCKWISE_A
		BANKSEL PORTB
		BSF PORTB, 5				;SET LED INDICATOR (B5)
		BANKSEL COMMAND_ENCODER			;SET COMMAND ENABLE
		BSF COMMAND_ENCODER, 5			;ENCODER A COUNTERCLOCKWISE = BIT 5
		CALL DELAY				;CALL .5SECOND DELAY SUB
		BANKSEL PORTB
		BCF PORTB, 5				;CLEAR LED INDICATOR (B5)
		GOTO LEAVE_A				;LEAVE ENCODER A SUB
	;**********SET OLD INPUTS AND LEAVE ENODER A CODE*****	
	LEAVE_A		
		MOVLW 0X03				;SET OLD INPUT FROM CURRENT INPUTS
		BANKSEL PORTB
		ANDWF  PORTB, W
		BANKSEL INPUT_OLD_A
		MOVWF INPUT_OLD_A
		BANKSEL ENCODER_A			;CLEAR CHANGE ON INTERRUPT ENABLE
		CLRF ENCODER_A
	
		RETURN					;RETURN TO MAIN CODE

  ENCODER_B_SUB;*************************************	;SUB - SET ENCODER B OUTPUTS
	
	;*********INPUT A CHANGES FROM LOW TO HIGH***********
		BANKSEL ENCODER_B
		BTFSS ENCODER_B, 0			;TEST IF INPUT A HIGH ENABLE IS SET (BIT0)		
		GOTO ENCODER_B_INA_LOW			;GOTO TEST IF INPUT A LOW ENABLE IS SET 			
	    ;**********OLD B INPUT LOW
		BANKSEL PORTB
		BTFSC PORTB, 3				;TEST IF INPUT B (B3) IS LOW			
		GOTO ENCODER_B_INB_HIGH			;GOTO TEST IF INPUT B (B3) IS HIGH
		
		BANKSEL INPUT_OLD_B
		BTFSC INPUT_OLD_B, 3			;TEST IF OLD INPUT B IS LOW (BIT3)		
		GOTO LEAVE_B				;LEAVE ENCODER B SUB
	    ;*********CLOCKWISE OUTPUT
		GOTO CLOCKWISE_B			;SET ENCODER B CLOCKWISE OUTPUT 
	    ;**********OLD B INPUT HIGH
	    ENCODER_B_INB_HIGH	
		BANKSEL INPUT_OLD_B
		BTFSS INPUT_OLD_B, 3			;TEST IF OLD INPUT B IS HIGH (BIT3)				
		GOTO LEAVE_B				;LEAVE ENCODER B SUB
	    ;*********COUNTER CLOCKWISE OUTPUT
		GOTO COUNTERCLOCKWISE_B			;SET ENCODER B COUNTERCLOCKWISE OUTPUT	
		
	;*************INPUT A CHANGED FROM HIGH TO LOW**********	
	    ENCODER_B_INA_LOW
		BANKSEL ENCODER_B
		BTFSS ENCODER_B, 1			;TEST IF INPUT A LOW ENABLE IS SET (BIT1)
		GOTO ENCODER_B_INB_H			;GOTO TEST IF INPUT B HIGH ENABLE IS SET
	   ;**********OLD B INPUT HIGH
		BANKSEL PORTB
		BTFSS PORTB, 3				;TEST IF INPUT B (B3) IS HIGH				
		GOTO ENCODER_B_INB_LOW			;GOTO TEST IF INPUT B (B3) IS LOW
		
		BANKSEL INPUT_OLD_B
		BTFSS INPUT_OLD_B, 3			;TEST IF OLD INPUT B IS HIGH (BIT3)		
		GOTO LEAVE_B				;LEAVE ENCODER B SUB
	    ;*********CLOCKWISE OUTPUT
		GOTO CLOCKWISE_B			;SET ENCODER B CLOCKWISE OUTPUT 
	    ;**********OLD B INPUT LOW
	    ENCODER_B_INB_LOW
		BANKSEL INPUT_OLD_B
		BTFSC INPUT_OLD_B, 3			;TEST IF OLD INPUT B IS LOW (BIT3)			
		GOTO LEAVE_B				;LEAVE ENCODER B SUB
	    ;*********COUNTER CLOCKWISE OUTPUT
		GOTO COUNTERCLOCKWISE_B			;SET ENCODER B COUNTER CLOCKWISE OUTPUT
	
	;*************INPUT B CHANGED FROM LOW TO HIGH*********		
	    ENCODER_B_INB_H
		BANKSEL ENCODER_B
		BTFSS ENCODER_B, 2			;TEST IF INPUT B HIGH ENABLE IS SET (BIT2)
		GOTO ENCODER_B_INB_L			;GOTO TEST IF INPUT B LOW ENABLE IS SET 
	    ;**********OLD A INPUT HIGH
		BANKSEL PORTB
		BTFSS PORTB, 2				;TEST IF INPUT A (B2) IS HIGH			
		GOTO ENCODER_B_INA_HIGH			;GOTO TEST IF INPUT A (B2) IS LOW
		
		BANKSEL INPUT_OLD_B
		BTFSS INPUT_OLD_B, 2			;TEST IF OLD INPUT A IS HIGH (BIT2)		
		GOTO LEAVE_B				;LEAVE ENCODER B SUB
	    ;*********CLOCKWISE OUTPUT
		GOTO CLOCKWISE_B			;SET ENCODER B CLOCKWISE OUTPUT 
	    ;**********OLD A INPUT LOW
	    ENCODER_B_INA_HIGH
		BANKSEL INPUT_OLD_B
		BTFSC INPUT_OLD_B, 2			;TEST IF OLD INPUT A IS LOW (BIT2)			
		GOTO LEAVE_B				;LEAVE ENCODER B SUB
	    ;*********COUNTER CLOCK WISE OUTPUT
		GOTO COUNTERCLOCKWISE_B			;SET ENCODER B COUNTER CLOCKWISE OUTPUT
	
	;*************INPUT B CHANGED FROM HIGH TO LOW**********			
	    ENCODER_B_INB_L	
		BANKSEL ENCODER_B
		BTFSS ENCODER_B, 3			;TEST IF INPUT B LOW ENABLE IS SET (BIT3)		
		GOTO LEAVE_B				;LEAVE ENCODER B SUB	
	    ;**********OLD A INPUT LOW
		BANKSEL PORTB
		BTFSC PORTB, 2				;TEST IF INPUT A (B2) IS LOW				
		GOTO ENCODER_B_INA_L_2			;GOTO TEST IF INPUT A (B2) IS HIGH		
	
		BANKSEL INPUT_OLD_B
		BTFSC INPUT_OLD_B, 2			;TEST IF OLD INPUT A IS LOW (BIT2)			
		GOTO LEAVE_B				;LEAVE ENCODER B SUB
	    ;*********CLOCK WISE OUTPUT
		GOTO CLOCKWISE_B			;SET ENCODER B CLOCKWISE OUTPUT 		
	    ;**********OLD A INPUT HIGH
	    ENCODER_B_INA_L_2
		BANKSEL INPUT_OLD_B
		BTFSS INPUT_OLD_B, 2			;TEST IF OLD INPUT A IS HIGH (BIT2)
		GOTO LEAVE_B				;LEAVE ENCODER B SUB
	    ;*********COUNTER CLOCK WISE OUTPUT
		GOTO COUNTERCLOCKWISE_B			;SET ENCODER B COUNTER CLOCKWISE OUTPUT
	
	;*********CLOCKWISE OUTPUT ENCODER B**************	
	CLOCKWISE_B
		BANKSEL PORTB
		BSF PORTB, 6				;SET LED INDICATOR (B6)
		BANKSEL COMMAND_ENCODER			;SET COMMAND ENABLE		
		BSF COMMAND_ENCODER, 6			;ENCODER B CLOCKWISE = BIT 6
		CALL DELAY				;CALL .5SECOND DELAY SUB
		BANKSEL PORTB
		BCF PORTB, 6				;CLEAR LED INDICATOR (B6)			
		GOTO LEAVE_B				;LEAVE ENCODER B SUB
	;*********COUNTER CLOCKWISE OUTPUT ENCODER A******
	COUNTERCLOCKWISE_B
		BANKSEL PORTB
		BSF PORTB, 7				;SET LED INDICATOR (B7)			
		BANKSEL COMMAND_ENCODER			;SET COMMAND ENABLE
		BSF COMMAND_ENCODER, 7			;ENCODER A COUNTERCLOCKWISE = BIT 7
		CALL DELAY				;CALL .5SECOND DELAY SUB
		BANKSEL PORTB
		BCF PORTB, 7				;CLEAR LED INDICATOR (B7)				
		GOTO LEAVE_B				;LEAVE ENCODER B SUB
	;**********SET OLD INPUTS AND LEAVE ENODER B CODE*****
	LEAVE_B	
		MOVLW 0X0C				;SET OLD INPUT FROM CURRENT INPUTS
		BANKSEL PORTB
		ANDWF  PORTB, W
		BANKSEL INPUT_OLD_B
		MOVWF INPUT_OLD_B
		BANKSEL ENCODER_B			;CLEAR CHANGE ON INTERRUPT ENABLE
		CLRF ENCODER_B
				
		RETURN					;RETURN TO MAIN CODE

;******************************************
MAIN
;******************************************

    ;************TEST IF DIP SWITCH IS HIGH (MODE SELECT)**********
    INPUT_SWITCH
		BANKSEL PORTA
		BTFSS PORTA, 0	    
		GOTO MODE_1		    ;IF MODE SELECT IS LOW READ OTHER INPUTS
	;****SWITCH HIGH = MODE 2****	    ;MODE 2 = TURN ON ALL LED INDICATORS
		MOVLW 0XE7		     
		BANKSEL PORTC		    ;SET ALL PORTC LED INDICATORS
		MOVWF PORTC
	
		MOVLW 0XF0		    
		BANKSEL PORTB		    ;SET ALL PORTB LED INDICATORS
		MOVWF PORTB
		
		CALL DELAY		    ;CALL .5 SEC DELAY SUB
				
		BANKSEL PORTB
		CLRF PORTB		   ;CLEAR PORTB
		
		GOTO MAIN		   ;GOTO START OF MAIN CODE
		
    ;**********SWITCH LOW = MODE 1*******
    MODE_1				    ;TEST PUSGBUTTON AND ENCODER INPUTS
    ;************TEST IF INPUT 1 (SHOOT) IS PRESSED*********
    INPUT_1		
		BANKSEL PORTC
		BCF PORTC,0		    ;CLEAR LED INDICATOR (C0)
		BANKSEL PORTA		
		BTFSS PORTA, 1		    ;TEST IF INPUT 1 IS HIGH
		GOTO INPUT_2		    ;GOTO TO TEST INPUT 2
	;****INPUT 1 HIGH (PRESSED)****
		BANKSEL PORTC
		BSF PORTC, 0		    ;SET LED INDICATOR (C0)
		BANKSEL COMMAND_1STBYTE	    ;SET COMMAND DATA
		BSF  COMMAND_1STBYTE, 0	    ;INPUT 1 = BIT 0
		
    ;***********TEST IF INPUT 2 (REV) IS PRESSED*********
    INPUT_2	
		BANKSEL PORTC
		BCF PORTC, 1		    ;CLEAR LED INDICATOR (C1)
		BANKSEL PORTA
		BTFSS PORTA, 2		    ;TEST IF INPUT 2 IS HIGH
		GOTO INPUT_3		    ;GOTO TO TEST INPUT 3	
	;*******INPUT 2 HIGH (PRESSED)****
		BANKSEL PORTC
		BSF PORTC, 1		    ;SET LED INDICATOR (C1)
		BANKSEL COMMAND_1STBYTE	    ;SET COMMAND DATA
		BSF  COMMAND_1STBYTE, 1	    ;INPUT 2 = BIT 1
		
    ;***********TEST IF INPUT 3  IS PRESSED*********
    INPUT_3	
		BANKSEL PORTC
		BCF PORTC, 2		    ;CLEAR LED INDICATOR (C2)
		BANKSEL PORTA
		BTFSS PORTA, 3		    ;TEST IF INPUT 3 IS HIGH
		GOTO INPUT_4		    ;GOTO TO TEST INPUT 4	
	;*******INPUT 3 HIGH (PRESSED)****
		BANKSEL PORTC
		BSF PORTC, 2		    ;SET LED INDICATOR (C2)
		BANKSEL COMMAND_1STBYTE	    ;SET COMMAND DATA
		BSF  COMMAND_1STBYTE, 2	    ;INPUT 3 = BIT 2
		
    ;************TEST IF INPUT 4 PRESSED*****************
    INPUT_4	
		BANKSEL PORTC
		BCF PORTC, 5		    ;CLEAR LED INDICATOR (C5)
		BANKSEL PORTA
		BTFSS PORTA, 4		    ;TEST IF INPUT 4 IS HIGH	    
		GOTO INPUT_5		    ;GOTO TO TEST INPUT 5
	;****INPUT 4 HIGH (PRESSED)****
		BANKSEL PORTC
		BSF PORTC, 5		    ;SET LED INDICATOR (C5)
		BANKSEL COMMAND_1STBYTE	    ;SET COMMAND DATA
		BSF  COMMAND_1STBYTE, 3	    ;INPUT 4 = BIT 3
    ;************TEST IF INPUT 5 PRESSED******************
    INPUT_5	
		BANKSEL PORTC
		BCF PORTC, 6		    ;CLEAR LED INDICATOR (C6)   
		BANKSEL PORTA
		BTFSS PORTA, 5		    ;TEST IF INPUT 6 IS HIGH
		GOTO INPUT_6		    ;GOTO TO TEST INPUT 6
	;****INPUT 5 HIGH (PRESSED)****
		BANKSEL PORTC		    
		BSF PORTC, 6		    ;SET LED INDICATOR (C6)
    ;***********TEST IF INPUT 6 PRESSED
    INPUT_6	
		BANKSEL PORTC
		BCF PORTC, 7		    ;CLEAR LED INDICATOR (C7)
		BANKSEL PORTA
		BTFSS PORTA, 6		    ;TEST IF INPUT 7 IS HIGH
		GOTO ENCODER_A_TEST	    ;GOTO TEST ENCODER A	
		
	;*******INPUT 6 HIGH (PRESSED)****
		BANKSEL PORTC
		BSF PORTC, 7		    ;SET LED INDICATOR (C7)
		
    ;**********TEST ENCODER A INPUTS ********
    ENCODER_A_TEST
		CALL ENCODER_A_SUB	    ;TEST ENCODER A INPUTS AND SET OUTPUTS
	    CW_A	
		BANKSEL COMMAND_ENCODER
		BTFSS COMMAND_ENCODER, 4    ;TEST IF CLOCKWISE ENCODER A IS HIGH (BIT4)
		GOTO CCW_A		    ;GOTO TEST IF COUNTER CLOCKWISE ENCODER A IS HIGH
		
		BANKSEL COMMAND_1STBYTE	    ;SET COMMAND DATA
		BSF  COMMAND_1STBYTE, 4	    ;CLOCKWISE ENCODER A = BIT 4
		GOTO ENCODER_B_TEST	    ;GOTO TEST ENCODER B   
	    CCW_A	
		BANKSEL COMMAND_ENCODER
		BTFSS COMMAND_ENCODER, 5   ;TEST IF COUNTER CLOCKWISE ENCODER A IS HIGH (BIT5)
		GOTO  ENCODER_B_TEST	   ;GOTO TEST ENCODER B
		 
		BANKSEL COMMAND_1STBYTE	   ;SET COMMAND DATA
		BSF  COMMAND_1STBYTE, 5	   ;COUNTER CLOCKWISE ENCODER A = BIT 5
		GOTO ENCODER_B_TEST	   ;GOTO TEST ENCODER B
		
    ;**********TEST ENCODER B INPUTS ********		
    ENCODER_B_TEST  
		CALL ENCODER_B_SUB	    ;TEST ENCODER A INPUTS AND SET OUTPUTS
	    CW_B	
		BANKSEL COMMAND_ENCODER
		BTFSS COMMAND_ENCODER, 6    ;TEST IF CLOCKWISE ENCODER B IS HIGH (BIT6)
		GOTO CCW_B		    ;GOTO TEST IF COUNTER CLOCKWISE ENCODER B IS HIGH
		
		BANKSEL COMMAND_1STBYTE	    ;SET COMMAND DATA   
		BSF  COMMAND_1STBYTE, 6	    ;CLOCKWISE ENCODER B = BIT 6   
		GOTO FINAL_MODE_1	    ;GOTO EXIT MODE 1	    
	    CCW_B	
		BANKSEL COMMAND_ENCODER
		BTFSS COMMAND_ENCODER, 7    ;TEST IF COUNTER CLOCKWISE ENCODER B IS HIGH (BIT7)
		GOTO  FINAL_MODE_1	    ;GOTO EXIT MODE 1
		 
		BANKSEL COMMAND_1STBYTE	    ;SET COMMAND DATA
		BSF  COMMAND_1STBYTE, 7	    ;COUNTER CLOCKWISE ENCODER B = BIT 7
		GOTO  FINAL_MODE_1	    ;GOTO EXIT MODE 1

;*************EXIT MODE 1***************************	
    FINAL_MODE_1	
		
	MOVLW 0XF0
	BANKSEL COMMAND_1STBYTE		    ;CLEARS COMMANDS FROM INPUTS
	ANDWF COMMAND_1STBYTE, F	    ;STORES COMMANDS FROM ENCODERS
	
	GOTO MAIN			    ;RETURN TO START OF MAIN 
	
	END
;********************END PROGRAM DIRECTIVE ***********************************
;*****************************************************************************
